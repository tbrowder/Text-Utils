=begin pod

=head1 NAME

Text::Utils - Miscellaneous text utilities

=head1 SYNOPSIS

=begin code :lang<Raku>
# Export individual routines or :ALL
use Text::Utils :strip-comment;
my $text = q:to/HERE/;
    any kind of text, including code"; # some comment
    my $s = 'foo'; # another comment
    HERE

for $text.lines -> $line is copy {
    $line = strip-comment $line;
    say $line;
}
# OUTPUT with comments removed:
any kind of text, including code;
my $s = 'foo';
=end code

=head1 DESCRIPTION

The module contains several routines to make text handling easier for
module and program authors. The routines:

=begin table
Name | Notes
-----+------
commify
count-substrs
list2text
normalize-string | alias 'normalize-text'
sort-list
split-line
split-line-rw
strip-comment
wrap-paragraph | 'width' is in PS points
wrap-text  |  'width' is in number of chars
=end table

Following is a short synopsis and
signature for each of the routines.

=head3 commify

This routine was originally ported from the Perl version in the I<The
Perl Cookbook, 2e>.

The routine adds commas to a number to separate multiples of a
thousand.  For example, given an input of C<1234.56>, the routine
returns C<1,234.56>.

As an improvement, if real numbers are input, the routine returns the
number stringified with two decimal places. The user may specify the
desired number with the new C<:$decimals> named argument.

The signature:

=begin code :lang<Raku>
sub commify($num, :$decimals --> Str) is export(:commify)
{...}
=end code

=head3 count-substrs

Count instances of a substring in a string.

The signature:

=begin code :lang<Raku>
sub count-substrs(
    Str:D $string,
    Str:D $substr
    --> UInt
    ) is export(:count-substrs)
{...}
=end code

=head3 list2text

Turn a list into a text string for use in a document.

For example, this list C<<1 2 3>> becomes either this C<"1, 2, and 3">
(the default result) or this C<"1, 2 and 3"> (if the
C<$optional-comma> named variable is set to false). The default result
uses the so-called I<Oxford Comma> which is not popular among some
writers, but those authors may change the default behavior by
permanently by defining the environment variable
C<TEXT_UTILS_NO_OPTIONAL_COMMA>.

The signature:

=begin code :lang<Raku>
sub list2text(
    @list,
    :$optional-comma is copy = True
    ) is export(:list2text)
{...}
=end code

=head3 normalize-text

Alias for 'normalize-string'.

=head3 normalize-string

This routine trims a string and collapses multiple whitespace
characters (including tabs and newlines) into one.

The signature:

=begin code :lang<Raku>
subset Kn of Any where { $_ ~~ /^ :i [0|k|n]   /}; #= keep or normalize
subset Sn of Any where { $_ ~~ /^ :i [0|n|s|t] /}; #= collapse all contiguous ws
sub normalize-string(
    Str:D $str is copy
    Kn :t(:$tabs)=0,           #= keep or normalize
    Kn :n(:$newlines)=0,       #= keep or normalize
    Sn :c(:$collapse-ws-to)=0, #= collapse all contiguous ws
                               #=   to one char
    --> Str) is export(:normalize-string)
{...}
=end code

'Normalization' is the process of converting a contiguous sequence of
space characters into a single character. The three space characters
recognized are " " (0x20, 'space'), "\t" (0x09, tab), and "\n" (0x0A,
'newline'). The default algorithm to do that for a string C<$s> is
C<$s = s:g/ \s ** 2 / />.

This routine gives several options to control how the target string is
'normalized'.  First, the user may choose one or more of the space
character types to be normalized individually. Second, the user may
choose to 'collapse' all space characters to one of the three types.

Given a string with spaces, tabs, and newlines:

=begin code
my $s = " 1   \t\t\n\n 2 \n\t  3  ";
=end code

The default:
=begin code
say normalize-string($s) # OUTPUT: «1 2 3␤»
=end code

Normalize each tab:
=begin code
say normalize-string($s, :t<n>) # OUTPUT: «1 \t\n\n 2 \n\t 3␤»
=end code

Normalize each newline:
=begin code
say normalize-string($s, :n<n>) # OUTPUT: «1 \t\t\n 2 \n\t 3␤»
=end code

Normalize each tab and newline:
=begin code
say normalize-string($s, :t<n>, :n<n>) # OUTPUT: «1 \t\n 2 \n\t 3␤»
=end code

Collapse to a space:
=begin code
say normalize-string($s, :c<s>) # OUTPUT: «1 2 3␤»
=end code

Collapse to a tab:
=begin code
say normalize-string($s, :c<t>) # OUTPUT: «1\t2\t3␤»
=end code

Collapse to a newline:
=begin code
say normalize-string($s, :c<n>) # OUTPUT: «1\n2\n3␤»
=end code

Notice that in the normaalization routines, spaces (' ') are always 
normalized, even when tabs and newlines are normalized separately.

=head3 sort-list

=begin code
#  StrLength, LengthStr, Str, Length, Number
enum Sort-type is export(:sort-list) < SL LS SS LL N >;
sub sort-list(@list, :$type = SL, :$reverse --> List) is export(:sort-list)
{...}
=end code

By default, this routine sorts all lists by word length, then by Str
order. The order by length is by the shortest abbreviation first unless
the C<:$reverse> option is used.

The routine's output can be modified for other uses by entering the
C<:$type> parameter to choose another of the C<enum Sort-type>s.

=head3 split-line

This routine splits a string into two pieces.

Inputs are the string to be split, the split character, maximum
length, a starting position for the search, and the search direction.

It returns the two parts of the split string; the second part will be
an empty string if the input string is not too long.

The signature:

=begin code :lang<Raku>
sub split-line(
    Str:D $line is copy,
    Str:D $brk,
    UInt  :$max-line-length = 0,
    UInt  :$start-pos       = 0,
    Bool  :$rindex          = False
    --> List) is export(:split-line)
{...}
=end code

=head3 split-line-rw

Splits a string into two pieces.

Inputs are the string to be split, the split character, maximum
length, a starting position for the search, and search direction.

It returns the part of the input string past the break character, or
an empty string (the input string is modified in-place if it is too
long).

The signature:

=begin code :lang<Raku>
sub split-line-rw(
    Str:D $line is rw,
    Str:D $brk,
    UInt  :$max-line-length = 0,
    UInt  :$start-pos       = 0,
    Bool  :$rindex          = False
    --> Str) is export(:split-line-rw)
{...}
=end cod

=head3 strip-comment

Strip the comment from an input text line, save comment if requested,
normalize returned text if requested.

The routine returns a string of text with any comment stripped
off. Note the designated character will trigger the strip even though
it is escaped or included in quotes.  Also returns the comment,
including the comment character, if requested.  All returned text is
normalized if requested.  Any returned comment will also be normalized
if the C<normalize-all> option is used in place of C<normalize>.

The signature:

=begin code :lang<Raku>
sub strip-comment(
    $line is copy,                # string of text with possible comment
    :mark(:$comment-char) = '#',  # desired comment character indicator
                                  #   (with alias :$comment-char)
    :$save-comment,               # if true, return the comment
    :$normalize,                  # if true, normalize returned string
    :$normalize-all,              # if true, normalize returned string
                                  #   and also normalize any saved comment
    :$last,                       # if true, use the last instead of first
                                  #   comment character
    :$first,                      #= if true, the comment char must be the
                                  #=   first non-whitespace character on
                                  #=   the line; otherwise, the line is
                                  #=   returned as is
    ) is export(:strip-comment)
{...}
=end code

Note the default return is the returned string without any comment.
However, if you use the C<save-comment> option, a two-element list is
returned: C<($string, $comment)> (either element may be "" depending
upon the input text line).

=head3 wrap-paragraph

This routine wraps a list of words into a paragraph with a maximum
line width in characters (default: 78), and returns a list of the new
paragraph's lines formatted as desired. An option, C<:$para-pre-text>,
used in conjunction with C<:$para-indent>, is very useful for use in
auto-generation of code. For example, given this chunk of text
describing a following PDF method C<MoveTo(x, y)>:

=begin code
my $str = q:to/HERE/;
Begin a new sub-path by moving the current point to coordinates (x,
y), omitting any connecting line segment. If the previous path
construction operator in the current path was also m, the new m
overrides it.
HERE
=end code

Run that string through the sub to see the results:

=begin code :lang<raku>
my @para = wrap-paragraph $str.lines, :para-pre-text('#| '), :para-indent(4);
.say for @para;
=end code

yields:

=begin code
    #| Begin a new sub-path by moving the current point to coordinates (x, y),
    #| omitting any connecting line segment. If the previous path construction
    #| operator in the current path was also m, the new m overrides it.
=end code

The signature:

=begin code :lang<Raku>
multi sub wrap-paragraph(
    @text,
    UInt :$max-line-length     = 78,
    #------------------------------#
    UInt :$para-indent         = 0,
    UInt :$first-line-indent   = 0,
    UInt :$line-indent         = 0,
    #------------------------------#
    Str  :$para-pre-text       = '',
    Str  :$first-line-pre-text = '',
    Str  :$line-pre-text       = '',
    #------------------------------#
    :$debug,
    --> List) is export(:wrap-paragraph)
{...}
multi sub wrap-paragraph(
    $text,
    # ... other args same as the other multi
    --> List) is export(:wrap-paragraph)
{...}
=end code

=head3 wrap-text

This routine is used in creating PostScript PDF or other output
formats where blocks (e.g., paragraphs) need to be wrapped to a
specific maximum width based on the font face and font size to be
used.  Note it has all the options of the B<wrap-paragraph> routine
except the C<:width> is expressed in PostScript points (72 per inch)
as is the C<:font-size>.  The default C<:width> is 468 points, the
length of a line on a Letter paper, portrait orientation, with
one-inch margins on all sides.

The fonts currently handled are the the 14 PostScript and PDF I<Core Fonts>:

=begin table
Courier Courier-Bold Courier-Oblique Courier-BoldOblique
Helvetica Helvatica-Bold Helvetica-Oblique Helvatica-BoldOblique
Times-Roman Times-Bold Times-Italic Times-BoldItalic
Symbol
Zaphdingbats
=end table

=begin code :lang<Raku>
multi sub wrap-text(
    @text,
    Real :$width               = 468, #= PS points for 6.5 inches
         :$font-name           = 'Times-Roman',
    Real :$font-size           = 12,
    #------------------------------#
    UInt :$para-indent         = 0,
    UInt :$first-line-indent   = 0,
    UInt :$line-indent         = 0,
    #------------------------------#
    Str  :$para-pre-text       = '',
    Str  :$first-line-pre-text = '',
    Str  :$line-pre-text       = '',
    #------------------------------#
    :$debug,
    --> List) is export(:wrap-text)
{...}
multi sub wrap-text(
    $text,
    # ... other args same as the other multi
    --> List) is export(:wrap-text)
{...}
=end code

=head1 AUTHOR

Tom Browder <tbrowder@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright &#x00A9; 2019-2024 Tom Browder

This library is free software; you may redistribute it or modify it
under the Artistic License 2.0.

=end pod
